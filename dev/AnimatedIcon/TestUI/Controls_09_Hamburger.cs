//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           6.1.0+gd30fc5741e
//       
//       Command:
//           LottieGen -Language CSharp -InputFile Controls_09_Hamburger.json
//       
//       Input file:
//           Controls_09_Hamburger.json (2410 bytes created 10:15-08:00 Nov 2 2020)
//       
//       Invoked on:
//           DESKTOP-PND6KTG @ 10:25-08:00 Nov 2 2020
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |    30 |
// |--------------------------+-------|
// | Animators                |     2 |
// | Animated brushes         |     - |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     1 |
// | PathKeyFrameAnimations   |     - |
// |--------------------------+-------|
// | ContainerVisuals         |     1 |
// | ShapeVisuals             |     1 |
// |--------------------------+-------|
// | ContainerShapes          |     1 |
// | CompositionSpriteShapes  |     1 |
// |--------------------------+-------|
// | Brushes                  |     1 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     - |
// ------------------------------------
using Microsoft.Graphics.Canvas.Geometry;
using System;
using System.Numerics;
using Windows.UI;
using Windows.UI.Composition;

namespace AnimatedVisuals
{
    // Name:        Controls_09_Hamburger
    // Frame rate:  60 fps
    // Frame count: 60
    // Duration:    1000.0 mS
    // __________________________________________________________
    // |  Marker   |  Constant   | Frame |  mS   |   Progress   |
    // |___________|_____________|_______|_______|______________|
    // | Hover_On  | M_Hover_On  |   0.0 |   0.0 | 0F           |
    // | Hover_Off | M_Hover_Off |  19.0 | 316.7 | 0.316666663F |
    // | Click_On  | M_Click_On  |  20.0 | 333.3 | 0.333333343F |
    // | Click_Off | M_Click_Off |  49.0 | 816.7 | 0.816666663F |
    // | End_On    | M_End_On    |  50.0 | 833.3 | 0.833333313F |
    // | End_Off   | M_End_Off   |  59.0 | 983.3 | 0.983333349F |
    // ----------------------------------------------------------
    sealed class Controls_09_Hamburger : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
    {
        // Animation duration: 1.000 seconds.
        internal const long c_durationTicks = 10000000;

        // Marker: Hover_On.
        internal const float M_Hover_On = 0F;

        // Marker: Hover_Off.
        internal const float M_Hover_Off = 0.316666663F;

        // Marker: Click_On.
        internal const float M_Click_On = 0.333333343F;

        // Marker: Click_Off.
        internal const float M_Click_Off = 0.816666663F;

        // Marker: End_On.
        internal const float M_End_On = 0.833333313F;

        // Marker: End_Off.
        internal const float M_End_Off = 0.983333349F;

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;

            if (AnimatedVisual.IsRuntimeCompatible())
            {
                return
                    new AnimatedVisual(
                        compositor
                        );
            }

            return null;
        }

        sealed class AnimatedVisual : Microsoft.UI.Xaml.Controls.IAnimatedVisual
        {
            const long c_durationTicks = 10000000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix, CompositionBrush fillBrush)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                result.FillBrush = fillBrush;
                return result;
            }

            // - - - - Shape tree root for layer: Layer 1
            // - - ShapeGroup: Group 1 Scale:0.95827,0.95827
            // - Path 3+Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_0()
            {
                var result = CanvasGeometry.CreateGroup(
                    null,
                    new CanvasGeometry[] { Geometry_1(), Geometry_2(), Geometry_3() },
                    CanvasFilledRegionDetermination.Winding);
                return result;
            }

            // - - - - - Shape tree root for layer: Layer 1
            // - - - ShapeGroup: Group 1 Scale:0.95827,0.95827
            // - - Path 3+Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(32.5F, -24.2779999F));
                    builder.AddLine(new Vector2(-32.5F, -24.2779999F));
                    builder.AddLine(new Vector2(-32.5F, -31.5F));
                    builder.AddLine(new Vector2(32.5F, -31.5F));
                    builder.AddLine(new Vector2(32.5F, -24.2779999F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Shape tree root for layer: Layer 1
            // - - - ShapeGroup: Group 1 Scale:0.95827,0.95827
            // - - Path 3+Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(32.5F, 33.5F));
                    builder.AddLine(new Vector2(-32.5F, 33.5F));
                    builder.AddLine(new Vector2(-32.5F, 26.2779999F));
                    builder.AddLine(new Vector2(32.5F, 26.2779999F));
                    builder.AddLine(new Vector2(32.5F, 33.5F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - - - - Shape tree root for layer: Layer 1
            // - - - ShapeGroup: Group 1 Scale:0.95827,0.95827
            // - - Path 3+Path 2+Path 1.PathGeometry
            CanvasGeometry Geometry_3()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(32.5F, 4.55499983F));
                    builder.AddLine(new Vector2(-32.5F, 4.55499983F));
                    builder.AddLine(new Vector2(-32.5F, -2.61100006F));
                    builder.AddLine(new Vector2(32.5F, -2.61100006F));
                    builder.AddLine(new Vector2(32.5F, 4.55499983F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // - - Shape tree root for layer: Layer 1
            // ShapeGroup: Group 1 Scale:0.95827,0.95827
            CompositionColorBrush ColorBrush_Black()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0x00, 0x00, 0x00));
            }

            // Shape tree root for layer: Layer 1
            CompositionContainerShape ContainerShape()
            {
                var result = _c.CreateContainerShape();
                result.Offset = new Vector2(35F, 35F);
                // ShapeGroup: Group 1 Scale:0.95827,0.95827
                result.Shapes.Add(SpriteShape());
                result.StartAnimation("Scale", ScaleVector2Animation());
                var controller = result.TryGetAnimationController("Scale");
                controller.Pause();
                BindProperty(controller, "Progress", "_.Progress", "_", _root);
                return result;
            }

            // - - Shape tree root for layer: Layer 1
            // ShapeGroup: Group 1 Scale:0.95827,0.95827
            // Path 3+Path 2+Path 1.PathGeometry
            CompositionPathGeometry PathGeometry()
            {
                return _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
            }

            // - Shape tree root for layer: Layer 1
            // Path 3+Path 2+Path 1
            CompositionSpriteShape SpriteShape()
            {
                // Rotation:-0.007912857021786821 degrees, Scale:<0.95827, 0.95827>
                var result = CreateSpriteShape(PathGeometry(), new Matrix3x2(0.958270013F, 0F, 0F, 0.958270013F, 0F, 0F), ColorBrush_Black());
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                // Shape tree root for layer: Layer 1
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0F, 1F));
            }

            // Shape tree root for layer: Layer 1
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(70F, 70F);
                result.Shapes.Add(ContainerShape());
                return result;
            }

            // - - Shape tree root for layer: Layer 1
            // Scale
            StepEasingFunction HoldThenStepEasingFunction()
            {
                var result = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            // - Shape tree root for layer: Layer 1
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation()
            {
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1F, 1F), HoldThenStepEasingFunction());
                result.InsertKeyFrame(0.25F, new Vector2(1.10000002F, 1F), CubicBezierEasingFunction_0());
                result.InsertKeyFrame(0.333333343F, new Vector2(1.10000002F, 1F), _c.CreateCubicBezierEasingFunction(new Vector2(0F, 0F), new Vector2(0F, 1F)));
                result.InsertKeyFrame(0.5F, new Vector2(0.649999976F, 1F), _c.CreateCubicBezierEasingFunction(new Vector2(0.850000024F, 0F), new Vector2(0.75F, 1F)));
                result.InsertKeyFrame(0.75F, new Vector2(0.699999988F, 1F), _c.CreateCubicBezierEasingFunction(new Vector2(0.349999994F, 0F), new Vector2(0F, 1F)));
                result.InsertKeyFrame(0.833333313F, new Vector2(0.699999988F, 1F), _c.CreateCubicBezierEasingFunction(new Vector2(0.850000024F, 0F), new Vector2(0.833000004F, 1F)));
                result.InsertKeyFrame(0.983333349F, new Vector2(1F, 1F), _cubicBezierEasingFunction_0);
                return result;
            }

            internal AnimatedVisual(
                Compositor compositor
                )
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(70F, 70F);
            void IDisposable.Dispose() => _root?.Dispose();

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 7);
            }
        }
    }
}
